{"version":3,"sources":["components/ContactForm/ContactForm.js","components/ContactList/ContactList.js","components/Filter/Filter.js","components/App.js","hooks/useLocalStorage.js","index.js"],"names":["ContactForm","onAddContact","useState","name","setName","number","setNumber","nameInputId","shortid","generate","numberInputId","handleChangeForm","e","target","value","resetForm","onSubmit","preventDefault","id","type","placeholder","onChange","pattern","title","ContactListItem","onRemove","onClick","ContactsList","contacts","length","map","Filter","App","key","defaultValue","JSON","parse","window","localStorage","getItem","state","setState","useEffect","setItem","stringify","useLocalStorage","setContacts","filter","setFilter","contact","find","alert","trim","prevContacts","normalizedFilter","toLowerCase","includes","getVisibleContacts","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.eaf09bf4.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport shortid from 'shortid';\n\nconst ContactForm = ({ onAddContact }) => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const nameInputId = shortid.generate();\n  const numberInputId = shortid.generate();\n\n  const handleChangeForm = e => {\n    const { name, value } = e.target;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const handleSubmitForm = e => {\n    e.preventDefault();\n\n    onAddContact(name, number);\n\n    if ((!name && number) || (name && !number)) {\n      return;\n    }\n\n    resetForm();\n  };\n\n  const resetForm = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form onSubmit={handleSubmitForm}>\n      <input\n        id={nameInputId}\n        type=\"text\"\n        name=\"name\"\n        placeholder=\"Enter name\"\n        value={name}\n        onChange={handleChangeForm}\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n      />\n      <input\n        id={numberInputId}\n        type=\"tel\"\n        name=\"number\"\n        placeholder=\"Enter phone number\"\n        value={number}\n        onChange={handleChangeForm}\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n      />\n      <button type=\"submit\">Add cotact</button>\n    </form>\n  );\n};\n\nContactForm.propTypes = {\n  onAddContact: PropTypes.func.isRequired,\n};\n\nexport default ContactForm;\n","import PropTypes from 'prop-types';\n\nconst ContactListItem = ({ id, name, number, onRemove }) => {\n  return (\n    <li>\n      {name}: {number} <button onClick={() => onRemove(id)}>delete</button>\n    </li>\n  );\n};\n\nconst ContactsList = ({ contacts, onRemove }) => {\n  if (contacts.length === 0) return null;\n  return (\n    <ul>\n      {contacts.map(({ id, name, number }) => (\n        <ContactListItem\n          key={id}\n          name={name}\n          number={number}\n          onRemove={() => onRemove(id)}\n        />\n      ))}\n    </ul>\n  );\n};\n\nContactsList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    }),\n  ).isRequired,\n  onRemove: PropTypes.func.isRequired,\n};\n\nexport default ContactsList;\n","import PropTypes from 'prop-types';\n\nconst Filter = ({ value, onChange }) => {\n  // console.log(filter);\n  return (\n    <input\n      type=\"text\"\n      name=\"filter\"\n      value={value}\n      onChange={onChange}\n      placeholder=\"Enter name for Search\"\n    />\n  );\n};\n\nFilter.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nexport default Filter;\n","import React, { useState } from 'react';\n\nimport shortid from 'shortid';\n\nimport useLocalStorage from '../hooks/useLocalStorage';\nimport ContactForm from './ContactForm';\nimport ContactsList from './ContactList';\nimport Filter from './Filter';\n\nconst App = () => {\n  const [contacts, setContacts] = useLocalStorage('contacts', []);\n  const [filter, setFilter] = useState('');\n\n  const handleAddContact = (name, number) => {\n    const contact = {\n      id: shortid.generate(),\n      name,\n      number,\n    };\n\n    if (contacts.find(contact => contact.name === name)) {\n      alert(`${name} is already in contacts`);\n      return;\n    }\n\n    if (contacts.find(contact => contact.number === number)) {\n      alert(`Number ${number} is already in contacts`);\n      return;\n    }\n\n    if ((!name || name.trim() === '') && (!number || number.trim() === '')) {\n      alert('Fill in the fields \"Name\" and \"Number\"');\n      return;\n    }\n\n    if (!name || name.trim() === '') {\n      alert('Field \"Name\" is empty');\n      return;\n    }\n\n    if (!number || number.trim() === '') {\n      alert('Field \"Number\" is empty');\n      return;\n    }\n    setContacts(prevContacts => [contact, ...prevContacts]);\n  };\n\n  const changeFilter = e => {\n    setFilter(e.target.value);\n  };\n\n  const getVisibleContacts = () => {\n    const normalizedFilter = filter.toLowerCase();\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter),\n    );\n  };\n\n  const handleRemoveContact = id => {\n    setContacts(() => contacts.filter(contact => contact.id !== id));\n  };\n\n  return (\n    <>\n      <h1>Phonebook</h1>\n      <ContactForm onAddContact={handleAddContact} />\n\n      <h2>Contacts</h2>\n      <Filter value={filter} onChange={changeFilter} />\n      {contacts.length === 0 ? (\n        <p>There are no contacts in the list</p>\n      ) : (\n        <ContactsList\n          contacts={getVisibleContacts()}\n          onRemove={handleRemoveContact}\n        />\n      )}\n    </>\n  );\n};\n\nexport default App;\n","import { useState, useEffect } from 'react';\n\nexport default function useLocalStorage(key, defaultValue) {\n  const [state, setState] = useState(\n    () => JSON.parse(window.localStorage.getItem(key)) ?? defaultValue,\n  );\n\n  useEffect(() => {\n    window.localStorage.setItem(key, JSON.stringify(state));\n  }, [key, state]);\n\n  return [state, setState];\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// const link = React.createElement(\n//   'a',\n//   { href: 'reactjs.org', target: '_blank' },\n//   'Ссылочка',\n// );\n\n// const jsxLink = <a href=\"reactjs.org\">СсылочкаJsx</a>;\n\n// // console.log(link);\n// console.log(jsxLink);\n\n// ReactDOM.render(link, document.getElementById('root'));\n"],"sourceRoot":""}